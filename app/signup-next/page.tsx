"use client";

import { ImageUpload } from "@/components/inputs/image-upload";
import { UserButton, useUser } from "@clerk/nextjs";
import axios from "axios";
import { useRouter } from "next/navigation";
import { useState } from "react";

const Signup = () => {
  const [image, setImage] = useState("");
  const [name, setName] = useState(""); // l∆∞u tr·ªØ d·ªØ li·ªáu ban ƒë·∫ßu c·ªßa name
  const [errorName, setErrorName] = useState(""); // l∆∞u tr·ªØ l·ªói ban ƒë·∫ßu c·ªßa name l√† r·ªóng
  const [errorImage, setErrorImage] = useState("");
  const [linkName, setLinkName] = useState("");
  const [errorLinkName, setErrorLinkName] = useState("");
  const [url, setUrl] = useState("");
  const [errorUrl, setErrorUrl] = useState("");

  // state l∆∞u tr·∫°ng th√°i c·ªßa button
  const [inputParirs, setInputParirs] = useState([
    { id: 1, input1: "", input2: "" },
  ]);

  const { push } = useRouter(); // hook trong next d√πng ƒë·ªÉ chuy·ªÉn trang
  const { user } = useUser(); // hook trong next/navigation d√πng ƒë·ªÉ l·∫•y d·ªØ li·ªáu email v·ª´a ƒëƒÉng nh·∫≠p
  // console.log("userId", user);

  const addInputPart = () => {
    //s√©t bi·∫øn InputParirs b·∫±ng 1 callback nhan dau vao la m·∫£ng objet,
    setInputParirs((prevPairs) => [
      ...prevPairs, // tr·∫£ v·ªÅ 1 m·∫£ng object ƒë√£ nh·∫≠n v√† khi ·∫•n v√†o n√∫t add th√¨ tr·∫£ v·ªÅ th√™m 1 object
      {
        id: prevPairs.length + 1,
        input1: "",
        input2: "",
      },
    ]);
  };

  const handleInputChange = (id: any, inputType: any, value: any) => {
    // id l√† gi√° tr·ªã duy nh·∫•tƒë·∫°i di·ªán cho c·∫∑p √¥ input,
    // inputType l√† chu·ªói ch·ªâ ƒë·ªãnh lo·∫°i input m√† b·∫°n mu·ªën thay ƒë·ªïi gi√° tr·ªã: input1 or input2, value: gi√° tr·ªã m·ªõi c·ªßa √¥ input

    setInputParirs(
      (
        prevPairs // s√©t InputParirs  d√πng h√†m map ƒë·ªÉ t·∫°o m·∫£ng m·ªõi (prevPairs k b·ªã thay ƒë·ªïi)
      ) =>
        //
        prevPairs.map((pair) =>
          // n·∫øu pair.id === id th√¨ n√≥ tr·∫£ v·ªÅ 1 c·∫∑p gi√° tr·ªã m·ªõi v·ªõi gi√° tr·ªã c·ªßa InputType ƒëc c·∫≠p nh·∫≠t th√†nh value,
          //ng∆∞·ª£c l·∫°i n√≥ s·∫Ω gi·ªØ nguy√™n c·∫∑p √¥ input ƒë√≥
          pair.id === id ? { ...pair, [inputType]: value } : pair
        )
    );
  };

  const handleSubmit = (e: any) => {
    e.preventDefault(); // ngƒÉn ch·∫∑n h√†nh ƒë·ªông m·∫∑c ƒë·ªãnh c·ªßa s·ª± ki·ªán submit(v√≠ d·ª•: k l√†m cho trang web reload)
    // sau khi ·∫•n n√∫t submit n·∫øu k c√≥ n·ªôi dung name th√¨ setErrorName b√°o l·ªói
    if (!name) {
      setErrorName("Please enter your name");
    }

    if (!image) {
      setErrorImage("Please upload a profile image");
    }

    if (!url) {
      setErrorUrl("Please add at least one link to continue");
    }
    // Bi·ªÉu th·ª©c ch√≠nh quy ki·ªÉm tra ƒë∆∞·ªùng link h·ª£p l·ªá
    var linkPattern =
      /^(http(s)?:\/\/)(www\.)?[a-zA-Z0-9-]+(\.[a-zA-Z]{2,})+(\.[a-zA-Z]{2,})?([a-zA-Z0-9-._~:/?#[\]@!$&'()*+,;=]*)?$/;
    // Ki·ªÉm tra ƒë∆∞·ªùng link
    if (url && !linkPattern.test(url)) {
      setErrorUrl("Invalid URL");
    }
    const data = {
      // l∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng nh·∫≠p l√™n server d√πng axios.post(api v√† d·ªØ li·ªáu truy·ªÅn v√†o mu·ªën l∆∞u tr·ªØ)
      username: user?.username,
      name: name,
      avatar: image,
      links: [
        {
          url: url,
        },
      ],
    };

    senDataToServer(data);
  };
  const senDataToServer = async (data: any) => {
    try {
      const response = await axios.post("/api/bio", data);
      // console.log('response.status', response.status)
      if (response.status === 200) {
        push("/dashboard"); // n·∫øu g·ª≠i d·ªØ li·ªáu l√™n server th√†nh c√¥ng th√¨ chuy·ªÉn trang
      } else {
        console.error("Y√™u c·∫ßu kh√¥ng th√†nh c√¥ng", response.status);
      }
    } catch (error) {
      // X·ª≠ l√Ω l·ªói k·∫øt n·ªëi ho·∫∑c l·ªói t·ª´ server
      console.error("L·ªói khi g·ª≠i y√™u c·∫ßu:", error);
    }
  };

  return (
    <div>
      <div className="flex justify-between px-5 py-5">
        <span>LOGO</span>
        <div className="flex gap-2">
          {/* <span>{user?.primaryEmailAddress?.emailAddress}</span> */}
          {/* userButton l√† icon th∆∞ vi·ªán clerk vi·∫øt s·∫µn sau khi ƒëƒÉng nh·∫≠p */}
          <UserButton />
          <span>
            <i className="fa-solid fa-chevron-down"></i>
          </span>
        </div>
      </div>
      <div className="max-w-[480px] mx-auto">
        <div className="mb-[24px] flex flex-col items-center">
          <span className="font-inter font-bold text-blDark text-[24px]">
            Setup your page
          </span>

          <span className="text-sm">{user?.username} üéâ</span>
        </div>
        <div className="bg-white border-none rounded-lg px-[32px] py-[32px] ">
          <div className="flex gap-6">
            <div>
              <ImageUpload
                value={image}
                error={errorImage}
                onChange={function (src: string): void {
                  //ch·∫°y d√≤ng 129 sau khi l·∫•y ƒëc url c·ªßa ·∫£nh, component ƒëc render l·∫°i th√¨ value= url ·∫£nh, truy·ªÅn v√†o componed con
                  setImage(src);
                }}
              />
            </div>

            <div>
              <input
                className={`${
                  errorName ? "border-rose-500 border bg-white" : ""
                } mt-2 w-[278px] h-[40px] bg-[#f0f0f0] focus-visible:outline-none px-3 py-1 text-sm`}
                type="text"
                placeholder="Your name"
                onChange={(e) => {
                  setName(e.target.value); // l·∫•y d·ªØ li·ªáu khi ng∆∞·ªùi d√πng nh·∫≠p

                  if (e.target.value.length > 0) {
                    setErrorName("");
                  }
                }}
              />

              {/* n·∫øu c√≥ l·ªói th√¨ hi·ªán th·ªã d√≤ng ch·ªØ sau khi ·∫•n n√∫t get started */}
              {errorName && (
                <p style={{ color: "red", fontSize: "14px", marginTop: "5px" }}>
                  {errorName}
                </p>
              )}

              <input
                className="border-none mt-3 w-[278px] h-[40px] bg-[#f0f0f0] focus-visible:outline-none px-3 py-1 text-sm"
                type="text"
                placeholder="bio"
              />
            </div>
          </div>
          {errorImage && (
            <p style={{ color: "red", fontSize: "14px", marginTop: "5px" }}>
              {errorImage}
            </p>
          )}

          <div className="mt-[32px]">
            <p className="font-semibold">Add your first link</p>
            {inputParirs.map((pair) => (
              <div
                key={pair.id}
                className={`${
                  errorUrl ? "border-rose-600 border" : ""
                } border-[1px] px-3 mt-4`}
              >
                <input
                  className="w-[390px] h-[45px] border-none focus-visible:outline-none  "
                  type="text"
                  placeholder="Link name (My Instagram)"
                  value={pair.input1}
                  onChange={(e) => {
                    setLinkName(e.target.value); // l·∫•y d·ªØ li·ªáu khi ng∆∞·ªùi d√πng nh·∫≠p
                    handleInputChange(pair.id, "input1", e.target.value);
                    if (e.target.value.length > 0) {
                      // set ƒëk n·∫øu value >0 th√¨ setError("")
                      setErrorLinkName("");
                    }
                  }}
                />
                <hr />
                <input
                  className="w-[390px] h-[45px] border-none focus-visible:outline-none  "
                  type="text"
                  placeholder="URL (https://instagram.com/yourname)"
                  value={pair.input2}
                  onChange={(e) => {
                    setUrl(e.target.value); // l·∫•y d·ªØ li·ªáu khi ng∆∞·ªùi d√πng nh·∫≠p
                    handleInputChange(pair.id, "input2", e.target.value);
                    if (e.target.value.length > 0) {
                      setErrorUrl("");
                    }
                  }}
                />
              </div>
            ))}
            {/* n·∫øu c√≥ l·ªói th√¨ hi·ªán th·ªã d√≤ng ch·ªØ sau khi ·∫•n n√∫t get started */}

            {errorUrl && (
              <p style={{ color: "red", fontSize: "14px", marginTop: "5px" }}>
                {errorUrl}
              </p>
            )}
          </div>
          <div className="mt-[16px] text-[14px] text-sky-400">
            <button onClick={addInputPart}>+ Add another link</button>
          </div>

          <button
            onClick={handleSubmit}
            className="mt-[24px] w-full h-[40px] bg-[linear-gradient(112.44deg,#ff5858_2.09%,#c058ff_75.22%)] text-white rounded-md"
          >
            GET STARTED
          </button>
        </div>
      </div>
    </div>
  );
};

export default Signup;
